package com.javatpoint.Bmodel;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeSet;

import javax.management.RuntimeErrorException;

import org.springframework.context.support.StaticApplicationContext;

public class PractCode {

	public static void main(String[] args) {

		// remove duplicate element from array
//		Integer[] numbers = new Integer[] {1,2,3,4,5,1,3,5};
//		
//		LinkedHashSet<Integer> lhashset = new LinkedHashSet<Integer>(Arrays.asList(numbers));
//		
//		for( Integer num: lhashset) {
//			System.out.println(num);
//		}

		// remove whitespace from String
//		String s = "Java    is oop";
//		StringTokenizer st = new StringTokenizer(s);
//		StringBuffer sb = new StringBuffer();
//		while(st.hasMoreElements()) {
//		sb.append(st.nextElement()).append(" ");
//	
//		}
//		System.out.println(sb.toString());

		// reverse word in string
//		String s = "Java is oop";
//		StringBuilder sb = new StringBuilder();
//		String[] str = s.split(" ");
//
//		for (String str1 : str) {
//			String reverseWord = new StringBuilder(str1).reverse().toString();
//            sb.append(reverseWord).append(" ");
//            }
//		System.out.println(sb.toString());

		// find largest and lowest integer number from array
//        int[] array = { 10, 20, 30, 40 };
//        int smallest = array[0];
//		int biggest = array[0];
//        for (int i = 0; i < array.length; i++) {
//            if (array[i] > biggest) {
//				biggest = array[i];
//			} else if (array[i] < smallest) {
//				smallest = array[i];
//			}
//		}
//        System.out.println("smallest" + " " + smallest);
//		System.out.println("largest" + " " + biggest);

		// find missing element between two or more array
//		int[] number = { 10, 20, 30, 40, 60 };
//
//		for (int i = 0; i < number.length - 1; i++) {
//
//			int j = i + 1;
//
//			int difference = number[j] - number[i];
//
//			int missing_num = number[i] + 1;
//
//			if (difference != 1) { // 0 < 9
//
//				for (int k = 1; k < difference; k++) {
//
//					System.out.println(missing_num);
//					missing_num++;
//				}
//			}
//		}

		// Count Occurrences of a Character in String
//		String str = "Java is ooooop";
//        int charCount = 0;
//		for (char ch = 'a'; ch <= 'z'; ch++) {
//			for (int i = 0; i < str.length() - 1; i++) {
//				if (str.charAt(i) == ch) {
//					charCount++;
//				}
//			}
//			if (charCount != 0) {
//				System.out.println(ch + "=" + charCount);
//				charCount = 0;
//			}
//		}

		// permutation of string
//		String str = "ABC";
//		int n = str.length();
//		PractCode permutation = new PractCode();
//		permutation.permute(str, 0, n - 1);
//	   
//		private void permute(String str, int l, int r) {
//		if (l == r)
//			System.out.println(str);
//		else {
//			for (int i = l; i <= r; i++) {
//				str = swap(str, l, i);
//				permute(str, l + 1, r);
//				str = swap(str, l, i);
//			}
//		}
//	}
//    public String swap(String a, int i, int j) {
//		char temp;
//		char[] charArray = a.toCharArray();
//		temp = charArray[i];
//		charArray[i] = charArray[j];
//		charArray[j] = temp;
//		return String.valueOf(charArray);
//	}

		// first way to finding the non repeating character
//		char ch = firstNonRepeatedCharacter("java");
//		System.out.println(ch);
//	 public static char firstNonRepeatedCharacter(String word) {
//		HashMap<Character, Integer> hashMap = new HashMap<>();
//		for (int i = 0; i < word.length(); i++) {
//			char c = word.charAt(i);
//        if (hashMap.containsKey(c)) {
//				hashMap.put(c, hashMap.get(c) + 1);
//			} else {
//
//				hashMap.put(c, 1);
//             }
//          }
//      for (int i = 0; i < word.length(); i++) {
//      char c = word.charAt(i);
//        if (hashMap.get(c) == 1) {
//				return c;
//			}
//		}
//		throw new RuntimeException("there is no repeating character available");
//	}

		// second way to find first non repeated character
//		String s="jajpjv";
//		int count=1;
//		for(int i=0;i<s.length();i++)
//		{
//		char ch=s.charAt(i);
//		if(s.indexOf(ch) == s.lastIndexOf(ch))
//		{
//		System.out.print(ch);
//		count=0;
//		break;
//		}
//		}
//		if(count==1)
//		System.out.print("All Characters Are repeated");

		// check program anagram or not
//		String s1 = "army";
//		String s2 = "mary";
//        boolean flag = isAnagram(s1, s2);
//		if (flag == true) {
//			System.out.println("its anagram");
//		} else {
//			System.out.println("this is not anagram");
//		}
//	public static boolean isAnagram(String word, String anagram) {
//		if (word.length() != anagram.length()) {
//			return false;
//		}
//		char[] chArray = word.toCharArray();
//		for (char ch : chArray) {
//			int index = anagram.indexOf(ch);
//			if (index != -1) {
//				anagram = anagram.substring(0, index) + anagram.substring(index);
//				System.out.println(anagram);
//			} else {
//				return false;
//			}
//		}
//		return true;
//	}

		// chack string is palindrome or not and return true or false
//		String s = "aba";
//		boolean flag = ispalindrome(s);
//		System.out.println(flag);
//	
//        public static boolean ispalindrome(String str) {
//        StringBuilder sb = new StringBuilder(str);
//		String reverseString = sb.reverse().toString();
//		if (reverseString.equals(str)) {
//			return true;
//		} else {
//			return false;
//		}
//
//	}

		
		String  s= "abc";
		
	char[] ch = 	s.toCharArray();
	
	List<Character> list = new ArrayList<Character>();

	for(int  i = 0; i < ch.length; i++) {
	list.add(ch[i]);

}
	System.out.println(list);
	Iterator<Character> it = 	list.iterator();

	while(it.hasNext()) {
		
	char c = 	it.next();

	if(c == 'b') {
		it.remove();
	}else {
		System.out.println(c);
	}

	
	}
}}